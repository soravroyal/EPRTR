////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////

package com.esri.solutions.flexviewer
{
	import com.esri.ags.Map;
	
	import flash.display.BitmapData;
	import flash.display.DisplayObject;
	
	/**
	 * IBaseWdiget defines the messages between WidgetManager and BaseWidget. It enables
	 * Dependency Injection (DI) implementation that allows loss coupling the
	 * detail widget logics.
	 * 
	 * <p>Once a widget module is loaded into the container, the WidgetManager will
	 * cast the instance of the module into IBaseWidget.
	 */
	public interface IBaseWidget
	{
		/**
		 * Give a session generated ID to the widget so that the widget can be
		 * identified during inter-component communication.
		 * 
		 * @param value a number generated by the session.
		 */
		function setId(value:Number):void;
		
		/**
		 * Widget title is coming from the configuration file. The title text is passed
		 * into the widget implementation.
		 * 
		 * @param value the title string from configuration file, config.xml
		 */
		function setTitle(value:String):void;
		
		/**
		 * A widget can have 40x40 icon image. The URL of the icon image file is specified
		 * in the config.xml file.
		 * 
		 * @param value the URL string of the icon image file. Flex supports JPG and PNG.
		 */
		function setIcon(value:String):void;
		
		/**
		 * A widget can have its own configuration file. The container and widget manager don't
		 * have the knowledge of the configuration content. The URL of the configuration file is
		 * specified in the config.xml. The widget is responsible for handling the configuration
		 * file. This file can be in any formate the widget developer perfers. 
		 * 
		 * @param value The URL of the configuration file.
		 */
		function setConfig(value:String):void;
		
		/**
		 * For advanced widget developer, the global configuration data is availible for use.
		 * 
		 * @param value the global configuration data
		 * @see ConfigData
		 */
		function setConfigData(value:ConfigData):void;
		
		/**
		 * The widget manager can change the state of the widget, such as close the widget.
		 * TODO: define standard state.
		 * 
		 * @param value the state token string.
		 */
		function setState(value:String):void;
		
		/**
		 * The widget manager can change the state of the widget, such as close the widget.
		 * TODO: get standard state.
		 * 
		 * 
		 */
		function getState():String;
		
		/**
		 * Pass the map reference to the widget.
		 * 
		 * @para value the map instance reference.
		 */
		function setMap(value:Map):void;
		/**
		 * Set button visibilities to false
		 * 
		 * @para array of btn names to set to invisible e.g. close or min
		 * 
		 */
		function setInvisBtns(btns:Array):void;
		
		/**
		 * return displayobject for printing
		 * 
		 * 
		 */
		function printwidget():DisplayObject;
		/**
		 * return bitmap data for printing
		 * 
		 * 
		 */
		function printwidgetbitmap():BitmapData;
		/**
		 * return base url to map rest server
		 * 
		 */
		function get widgetResourceFile():String;
		
		/**
		 * Set base url to map rest server
		 * 
		 * @para String defining the url of the rest server to use if http is not urls defined in config
		 * 
		 */
		function set widgetResourceFile(value:String):void;
		/*
		 */
		function getBaseRestServerUrl():String;
		
		/**
		 * Set base url to map rest server
		 * 
		 * @para String defining the url of the rest server to use if http is not urls defined in config
		 * 
		 */
		function setBaseRestServerUrl(value:String):void;
		
		function updateLocale(value:String):void;
		/**
		 * Update locale
		 * 
		 * @para String locale to use - must be in compiler -locale settings
		 * 
		 */
	}
}
<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas	xmlns:mx				="http://www.adobe.com/2006/mxml" 
			xmlns:comp				="components.*" 
			width					="100%" 
			height					="100%" 
			horizontalScrollPolicy	="off" 
			verticalScrollPolicy	="off"
			creationComplete		="init()" >

    <mx:Script>
		<![CDATA[

			import com.esri.solutions.flexviewer.AppEvent;
			import com.esri.solutions.flexviewer.components.ErrorWindow;			
			import mx.containers.TitleWindow;
			import mx.logging.Log;
		    import mx.logging.LogEventLevel;
		    import mx.logging.targets.TraceTarget;
			import mx.managers.PopUpManager;
		
		    public static const NAVIGATION_ZOOM_FULL:String			= "zoomfull";
		    
		    public static const NAVIGATION_ZOOM_PREVIOUS:String 	= "zoomprevious";
		    
		    public static const NAVIGATION_ZOOM_NEXT:String     	= "zoomnext";
		    
		    public static const NAVIGATION_ZOOM_INITIAL:String     	= "zoominitial";
		    
			public var configManager:ConfigManager;
			
			public var uiManager:UIManager;
			
			public var controller:Controller;
			
			public var mapManager:MapManager;
			
			public var widgetManager:WidgetManagerDocked;
			
			public var dataManager:DataManager;
			
			private static var _container:SiteContainer;
			
			private static var _lock:Boolean = false;
			
			private var _containerEventDispatcher:EventBus;
			
			public static var CONTAINER_INITIALIZED:String = "containerInitilized";
			
			public function init():void
			{
				_container = this;
				_lock = true; //make sure only one container is created.
				
				initLogging();
				
				//make sure the event bus is ready.
				_containerEventDispatcher = EventBus.getInstance();
				
				//prepare to show error message
				SiteContainer.addEventListener(AppEvent.APP_ERROR, showError);
				
				//tell the modules it's on business.
				SiteContainer.dispatch(SiteContainer.CONTAINER_INITIALIZED);
			}

            /**
             * Initialize the logging. As an example, the logging is setup to only
             * log the fatal event during the RPC related network communication,
             * such as HTTP call to obtain configuration file.
             */
            private function initLogging():void {
                // Create a target.
                var logTarget:TraceTarget = new TraceTarget();
     
                // Log only messages for the classes in the mx.rpc.* and 
                // mx.messaging packages.
                logTarget.filters=["mx.rpc.*","mx.messaging.*"];
    
                // Log on fatal levels.
                logTarget.level = LogEventLevel.FATAL;
    
                // Add date, time, category, and log level to the output.
                logTarget.includeDate       = true;
                logTarget.includeTime       = true;
                logTarget.includeCategory   = true;
                logTarget.includeLevel      = true;
    
                // Begin logging.
                Log.addTarget(logTarget);
            }       		
		
		    //to make sure the the children are visible.
		    private var isAddChild:Boolean = true;
		    protected override function commitProperties():void
		    {
		        super.commitProperties();
		        
		        if (isAddChild)
		        {
			        addChild(mapManager);
			        addChild(controller);
			        addChild(widgetManager);
			        isAddChild = false;
		        }    
		    }
		    
		    private function showError(event:AppEvent):void
		    {
	            var errorWindow:ErrorWindow = ErrorWindow(PopUpManager.createPopUp(this, ErrorWindow, true));
	           
	            // Add title to the title bar.
	            errorWindow.errorMessage = event.data as String;
	            	
	            // Add a close button.
	            // To close the container, your must also handle the close event.
	            errorWindow.showCloseButton=true;
		    	
		    }
		    
		   /* -----------------------------------------------
		      static functions as proxy of Event Bus
		      ----------------------------------------------- */
		      
			public static function getInstance():SiteContainer
			{
				if (!_lock){
					_container = new SiteContainer();
					_lock = true;
				}
				return _container;		
			}
		
		    //the following are the methods to allow modules access event bus via the contains.
			public static function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void 
		    {
		    	EventBus.getInstance().addEventListener(type, listener, useCapture, priority, useWeakReference);
		    }		    
		    
		    public static function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void 
		    {
		    	EventBus.getInstance().removeEventListener(type, listener, useCapture);
		    }		    
		    
		    //this is the simplest way of communicate. Just use a string.
		    public static function dispatch(type:String):Boolean 
		    {
		    	return EventBus.getInstance().dispatch(type);
		    }		    
		    
		    public static function dispatchEvent(event:Event):Boolean 
		    {
		    	var eventBase:EventBus = EventBus.getInstance();
		        return eventBase.dispatchEvent(event);
		    }		    
		    
		    /**
		    * 
		    */
		    public static function setStatus(status:String):void
		    {
		    	dispatchEvent(new  AppEvent(AppEvent.SET_STATUS, false, false, status));
		    }
			
		]]>
    </mx:Script>

    <mx:Metadata>
    	[DefaultProperty("childen")]
    </mx:Metadata>
    
</mx:Canvas>

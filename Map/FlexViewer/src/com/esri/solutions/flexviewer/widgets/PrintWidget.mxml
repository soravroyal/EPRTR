<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget	xmlns:esri			="http://www.esri.com/2008/ags" 
			xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:mxeffects		="com.adobe.ac.mxeffects.*"			
			xmlns:toccomp		="com.esri.solutions.flexviewer.components.toccustom.*" 
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300" 
			widgetConfigLoaded	="init()"
			addedToStage="AddedHandler_setPrintDetails()">
	
	
	<mx:Script>
		<![CDATA[
			import mx.controls.TextArea;
			import mx.controls.Label;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.Layer;
			import mx.core.Container;
			import com.esri.solutions.flexviewer.utils.Hashtable;
			import com.esri.solutions.flexviewer.IBaseWidget;
			import com.esri.solutions.flexviewer.WidgetManagerDocked;
			import com.esri.solutions.flexviewer.AppEvent;
			import mx.containers.VBox;
			import com.esri.solutions.flexviewer.ConfigData;

			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			
			import flash.net.SharedObject;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Text;
			import mx.printing.FlexPrintJobScaleType;
            import mx.printing.FlexPrintJob;
            import mx.graphics.ImageSnapshot;
            import mx.core.Application;
            
            
            import org.alivepdf.events.ProcessingEvent;
			import org.alivepdf.layout.Format;
			import org.alivepdf.events.PageEvent;
			import org.alivepdf.metrics.FontMetrics;
			import mx.rpc.remoting.RemoteObject;
			//import mx.core.Window;
			//import mx.controls.HTML;
			import org.alivepdf.annotations.StampStyle;
			import org.alivepdf.annotations.AnnotationHighlight;
			import org.alivepdf.encoding.JPEGEncoder;
			import org.alivepdf.display.PageMode;
			import org.alivepdf.viewing.WindowUI;
			import org.alivepdf.viewing.MenuBar;
			import org.alivepdf.viewing.ToolBar;
			import mx.effects.MaskEffect;
			import org.alivepdf.drawing.DashedLine;
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.colors.Color;
			import org.alivepdf.layout.Layout;
			import org.alivepdf.display.Display;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.pdf.PDF;
			import 	org.alivepdf.saving.*;
			import org.alivepdf.drawing.Caps;
			import org.alivepdf.drawing.Joint;
			import flash.geom.Rectangle;
			import org.alivepdf.drawing.Blend;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.Style;
			import org.alivepdf.images.ImageFormat;
			import org.alivepdf.images.ResizeMode;
			import org.alivepdf.transitions.Transition;
			import org.alivepdf.transitions.TransitionDirection;
			import org.alivepdf.transitions.Dimension;
			import org.alivepdf.transitions.MotionDirection;
			import org.alivepdf.annotations.StampStyle;
			import org.alivepdf.layout.Size;
			import org.alivepdf.pages.Page;
			
			import dk.atkins.CustomPDF;
			
			import com.esri.solutions.flexviewer.SiteContainer;
			
			import flash.external.ExternalInterface;

            			
			//labels
			[Bindable]
			private var titleLabel:String;
			
			[Bindable]
			private var subtitleLabel:String;
			
			[Bindable]
			private var submitLabel:String;
			
			[Bindable]
			private var submitPDFLabel:String;
			
			[Bindable]
			private var submitPNGLabel:String;
			
			[Bindable]
			private var title:String;
			
			[Bindable]
			private var subtitle:String;
			
			[Bindable]
			private var details:String;
			
			private var copyright:String;
			
			private var disclaimer:String;
			
			[Bindable]
			private var pdfcreateurl:String;
			
			[Bindable]
			private var pngcreateurl:String;
			
			/*[Bindable]
			private var footer:String;*/
			
			private var printDetailsText:String = "";
						
//<----------Legend Work			
			[Bindable]
			private var legendLabel:String;
			
			[Bindable]
			private var msgVisible:Boolean = false;
						
			//var to set if parent tree nodes are expanded
			private var expanded:Boolean = false;
			
			//var to hold the current map scale
			private var lScale:Number = 0;
//<----------End Legend Work
			
			private var container:SiteContainer = SiteContainer.getInstance();
			private var widgetManager:WidgetManagerDocked;
			
			private var appurl:String = mx.core.Application.application.url.slice(0,mx.core.Application.application.url.lastIndexOf("/"));
				
			private const ICON_URL:String = appurl +"/"+ "com/esri/solutions/flexviewer/assets/images/icons/";
							
			private function init():void
			{
	            if (configXML)
				{
					//labels
					/*
					titleLabel = configXML.labels.titlelabel || "Title:";
					subtitleLabel = configXML.labels.subtitlelabel || "Subtitle:";
				
					submitLabel = configXML.labels.submitlabel || "Print";
					submitPDFLabel = configXML.labels.submitPDFlabel || "PDF";
					submitPNGLabel = configXML.labels.submitPNGlabel || "PNG";
					
				
					
					title = configXML.title || "";
					subtitle = configXML.subtitle || "";										
					copyright = configXML.copyright || "";
					disclaimer = configXML.disclaimer || "";					
					details = configXML.details || "";
					
					*/
					setText();
					pdfcreateurl = configXML.pdfcreateurl;
					pngcreateurl = configXML.pngcreateurl;					
				
				}
			//	ExternalInterface.addCallback("setMapPrintDetails", setPrintDetails);
				ExternalInterface.addCallback("createMapPng", createMapPng);
				
				SiteContainer.addEventListener(AppEvent.SET_PRINT_DETAILS, setPrintDetails);
				
				
			}			
			
			
			
			//Function for addding the please wait to this widget
			private function showMessage(msg:String, swfVisible:Boolean):void
			{
				txtMessage.text = msg;
				swfMessage.visible = swfVisible;
				msgVisible = true;
			}	
					
			//Clear the message from the widget
			private function clearMessage():void
			{
				msgVisible = false;
			}
//<----------End Legend Work
			
			private function printMapOld():void
            {
                var printJob:FlexPrintJob = new FlexPrintJob();
				if (printJob.start())
                {
                    try
                    {
                        map.zoomSliderVisible = false;
                        printJob.addObject(map, FlexPrintJobScaleType.FILL_PAGE);                        
                        map.zoomSliderVisible = true;
                    }
                    catch (e:Error)
                    {
                        Alert.show( e.toString() );
                    }
                    printJob.send();
                }
            }
            
            private function printMap():void
            {
            	var printJob:FlexPrintJob = new FlexPrintJob();
				if (printJob.start())
                {
                	
                	var h:Number = printJob.pageHeight;
                	var w:Number = printJob.pageWidth - 20;
                	//VBOX
                	
                    try
                    {
                    	var printBox:VBox = createContent("print", w, h);
		                //PRINT
		               
		                this.addChild(printBox);
		                printJob.addObject(printBox, FlexPrintJobScaleType.SHOW_ALL);
                    	//printJob.printAsBitmap;
                    	this.removeChild(printBox);
		        	}
                    catch (e:Error)
                    {
                    	if(printBox)this.removeChild(printBox);
                        Alert.show( e.toString() );
                    }
                    try{
                    	printJob.send();
                    }catch(er:Error){
                    	trace(er.message);
                    }
                }
            }
            private function createContent(output:String,w:Number=21,h:Number=32):VBox{
            	
            		widgetManager  = container.widgetManager;
            		var widgets:Hashtable = widgetManager.getLoadedWidgets();
            		var widgetskeys:Array = widgets.getKeySet();
            		
            		var printBox:VBox = new VBox();					
                	printBox.styleName = "PrintBox";
                	printBox.width = map.width;                	
                	printBox.horizontalScrollPolicy = "off";
                	printBox.verticalScrollPolicy = "off";
                	
                	
                	
        			//TITLE
                	var printTitle:Text = new Text();
                	printTitle.text = title;
                	printTitle.styleName = "PrintTitle";
                	printTitle.setStyle("fontSize", h/12);
                	printTitle.percentWidth = 100;
               
                	//SUBTITLE
                	var printSubtitle:Text = new Text();
                	printSubtitle.text = subtitle;
                	printSubtitle.styleName = "PrintSubtitle";
                	printSubtitle.setStyle("fontSize", h/24);
                	printSubtitle.percentWidth = 100;
                	
                	//DETAILS
                	
                	var printDetails:Text = new Text();
                	printDetails.text = details + " " + printDetailsText;
                	printDetails.styleName = "PrintSubtitle";
                	printDetails.setStyle("fontSize", h/40);
                	
                	//MAP
                	var zoomSliderVisible:Boolean = map.zoomSliderVisible;
                	map.zoomSliderVisible = false;
                	//add ma copyright label to map before taking snaphot
                	var copyright_lbl:DisplayObject = map.addChild(Application.application.copyright_lbl);
					//take snapshot of map
					var bmpMap:BitmapData = ImageSnapshot.captureBitmapData(map);
					//put map copyright back on application
					Application.application.addChild(map.removeChild(copyright_lbl));
						            	
	                var bmp:Bitmap = new Bitmap(bmpMap);  
	                var printImg:Image = new Image();	                
	                printImg.styleName = "printMap"; 	            
	                printImg.source = bmp;
	                printImg.styleName = "printMap";
	              
	                map.zoomSliderVisible = zoomSliderVisible;
	                
	                
					
                	 //DISCLAIMER
                	var printDis:Text = new Text();
                	printDis.text = disclaimer;
                	printDis.styleName = "PrintCopyright";
                	printDis.setStyle("fontSize", h/48);
                	printDis.percentWidth = 100; 
                	            
	                //COPYRIGHT
                	var now:Date = new Date();
                	var printCopy:Text = new Text();
                	printCopy.text = copyright + " Printed on " + now.toLocaleString() + ".";
                	printCopy.styleName = "PrintCopyright";
                	printCopy.setStyle("fontSize", h/48);
                	printCopy.percentWidth = 100;                	
                	
                	
                	if(output == "print"){
	                	printBox.addChild(printTitle);
	                	printBox.addChild(printSubtitle);
	                	printDetails.percentWidth = 100;
	                	if(printDetailsText != ""){
	                		printBox.addChild(printDetails);
	                	}
	                	printImg.percentWidth = 99.5;
	                	printBox.addChild(printImg);
	                	
	                	// go through all loaded widgets to see if they have a print method
	                	 for(var i:int = 0; i < widgetskeys.length; i++){
                			var widget:IBaseWidget = widgets.find(widgetskeys[i]) as IBaseWidget;
                			widgetPrints(printBox,widget,output);
	                	 }	                	           
	                	
	                	printBox.addChild(printDis);
	                	printBox.addChild(printCopy);
	                	
                	}else if (output == "pdf"){
                		var myPDF:CustomPDF = new CustomPDF( Orientation.PORTRAIT, Unit.MM, Size.A4 );
            			myPDF.setDisplayMode( Display.FULL_PAGE, Layout.SINGLE_PAGE );
            			
            			myPDF.footerText = printCopy.text;
            			
                		var p:Page = myPDF.addPage();
                		var ypos:int = 15;
                		myPDF.setFont(FontFamily.ARIAL , Style.BOLD, 34);						 
                		myPDF.addText(printTitle.text, 10, ypos);
                		myPDF.setTitle(printTitle.text);
                		ypos += 8;
                		myPDF.setFont(FontFamily.ARIAL , Style.NORMAL, 18);
                		myPDF.addText(printSubtitle.text,10,ypos);
                		ypos += 5;
                		myPDF.setFont(FontFamily.ARIAL , Style.NORMAL, 12);
                		if(printDetailsText != ""){
                			myPDF.addText(printDetails.text,10,ypos);
                		}
                		ypos += 10;                		
                		//scale map bmp
                		var scalew:Number = p.w - 10;
                		var scaleh:Number = bmp.height/(bmp.width/scalew);
                		myPDF.addImage(bmp,5,ypos,scalew,scaleh);
                		ypos += scaleh + 4;
                		
                		// go through all loaded widgets to see if they have a print method
	            		for(var j:int = 0; j < widgetskeys.length; j++){
                			var theWidget:IBaseWidget = widgets.find(widgetskeys[j]) as IBaseWidget;
                			var tempYpos:int = widgetPrints(myPDF,theWidget,output,ypos);
                			if(tempYpos != 0) ypos = tempYpos;
	                	 }

                		myPDF.setY(ypos);
                		myPDF.setX(5);
                		myPDF.writeText ( 5, printDis.text, "");

                		myPDF.save( Method.REMOTE, pdfcreateurl, Download.ATTACHMENT );
                	}
                	return printBox;
            	
            }
            private function createPDF():void{
            	createContent("pdf");
            }
			
                		
            private function createPNG():void{
             	var image64BitText:String = getMapImg64Text();
				var vars:URLVariables = new  URLVariables();
				vars.image = image64BitText;
				var request:URLRequest = new URLRequest(pngcreateurl);
				request.data = vars;				
				vars.action = "send";
				vars.filename = "map";
				request.method = URLRequestMethod.POST;
				navigateToURL( request );
				
            }
            private function createMapPng(filename:String):void{
            	var image64BitText:String = getMapImg64Text();
				var vars:URLVariables = new  URLVariables();
				vars.image = image64BitText;
				vars.action = "save";
				vars.filename = filename;
				var request:URLRequest = new URLRequest(pngcreateurl);
				request.data = vars;
				request.method = URLRequestMethod.POST;				
				sendToURL( request );
				return;
            } 
            private function getMapImg64Text():String{
            	var zoomSliderVisible:Boolean = map.zoomSliderVisible;
             	map.zoomSliderVisible = false;
				var copyright_lbl:DisplayObject = map.addChild(Application.application.copyright_lbl);
				var imageSnap:ImageSnapshot = ImageSnapshot.captureImage(map);
				Application.application.addChild(map.removeChild(copyright_lbl));
				map.zoomSliderVisible = zoomSliderVisible;
				var image64BitText:String = ImageSnapshot.encodeImageAsBase64(imageSnap);
				return image64BitText;
            }  
            //gets print method from a widget and returns the height of the added object (used by pdf print)
            private function widgetPrints(addToObject:Object, widget:IBaseWidget, output:String="print", ypos:int = 0):int{
            	var printObjectHeight:int = 0;
            	var widgetstate:String = widget.getState();
            	//Set state of widget to maximized. Overview map causes error so don't try to resize it.
            	if(widgetstate && widgetstate != BaseWidget.STATE_MAXIMIZED && !(DisplayObject(widget).hasOwnProperty("ovMap"))){
            		widget.setState(BaseWidget.STATE_MAXIMIZED);
            	} 		                	
            	var printObject:DisplayObject = widget.printwidget();
            	var printWidgetBitmap:BitmapData = widget.printwidgetbitmap();
            	
            	//Set state back to what it was. Overview map causes error so don't try to resize it:
            	if(widgetstate && widgetstate != BaseWidget.STATE_MAXIMIZED && !(DisplayObject(widget).hasOwnProperty("ovMap"))){
            		widget.setState(widgetstate);
            	} 
            	if(printWidgetBitmap){
            		var bmpW:Bitmap = new Bitmap(printWidgetBitmap); 
            		var printW:Image = new Image(); 	            
               		printW.source = bmpW;
               		printObjectHeight = printW.height;
               		if(output == "print"){
               			VBox(addToObject).addChild(printW);
               		}
               		if(output == "pdf"){
               			var pdf:CustomPDF = CustomPDF(addToObject);
               			if(printObjectHeight > pdf.getCurrentPage().h - 20){
               				pdf.addPage();
               				ypos  = 0;
               				printObjectHeight = ((printObjectHeight + ypos)/thepdf.getCurrentPage().height)*thepdf.getCurrentPage().h + 5;
               			}else printObjectHeight = ypos + printObjectHeight
               			pdf.addImage(bmpW,5,ypos);
               		}
               		printWidgetBitmap = null;
            	}
            	else if(printObject){
        			var bmpWD:BitmapData = ImageSnapshot.captureBitmapData(printObject);
               		var bmpWid:Bitmap = new Bitmap(bmpWD);  
               		var printWid:Image = new Image(); 	            
               		printWid.source = bmpWid;
               		printObjectHeight = Bitmap(printWid.source).height;
               		if(output == "print")VBox(addToObject).addChild(printWid);
               		//if(output == "pdf")PDF(addToObject).addImage(printObject,5,ypos);
               		if(output == "pdf"){
               			var thepdf:CustomPDF = CustomPDF(addToObject);  
               			if(printObjectHeight > thepdf.getCurrentPage().h - 20){
               				thepdf.addPage();
               				ypos  = 0;
	                		printObjectHeight = ((printObjectHeight + ypos)/thepdf.getCurrentPage().height)*thepdf.getCurrentPage().h + 5;
               			}else printObjectHeight = ypos + printObjectHeight
               			thepdf.addImage(printObject,5,ypos);
               		}
               		printObject = null;
           		}
           		widget = null;
           		return printObjectHeight;
            }
            
            private function setPrintDetails(e:AppEvent):void{
            	var details:String = e.data as String;
            	printDetailsText = details; 
            	Application.application.printDetails = details;          	
            	
            }
            
            private function AddedHandler_setPrintDetails():void{
            	
            	if(Application.application.printDetails != "" )
				{
					printDetailsText = Application.application.printDetails;
				}           	
            	
            }            
   			override public function updateLocale(value:String):void{
   				super.updateLocale(value);
			
   				//add specific print widget texts here    	
				setText()		
			}
			
			private function setText():void{
				
				//title
				if(resourceManager.getString(widgetResourceFile, 'widgettitle'))wTemplate.setTitle(resourceManager.getString(widgetResourceFile, 'widgettitle'));

				//widget labels:
				titleLabel = resourceManager.getString(widgetResourceFile, 'titleLabel') || "Title:";
				subtitleLabel = resourceManager.getString(widgetResourceFile, 'subtitleLabel')  || "Subtitle:";				
				submitLabel = resourceManager.getString(widgetResourceFile, 'submitLabel') || "Print";
				submitPDFLabel = resourceManager.getString(widgetResourceFile, 'submitPDFLabel') || "PDF";	
				submitPNGLabel = resourceManager.getString(widgetResourceFile, 'submitPNGLabel') || "PNG";

				//print text
				title = resourceManager.getString(widgetResourceFile, 'title')  || configXML.title ||"";
				subtitle = resourceManager.getString(widgetResourceFile, 'subtitle') || configXML.subtitle || "";										
				copyright = resourceManager.getString(widgetResourceFile, 'copyright') || configXML.copyright || "";
				disclaimer = resourceManager.getString(widgetResourceFile, 'disclaimer')   || configXML.disclaimer || "";					
				details = resourceManager.getString(widgetResourceFile, 'details') || configXML.details || "";
				
			}
			
	
		]]>
	</mx:Script>	
	<mx:Metadata>
        [ResourceBundle("PrintWidgetStrings")]
    </mx:Metadata> 
	<WidgetTemplate id="wTemplate" height="130">
		<mx:ViewStack id="viewStack" width="100%" height="100%" creationPolicy="all">
		
			<mx:VBox width="100%" height="100%" verticalGap="10" paddingTop="10">
				<mx:Form id="frmPrint" verticalScrollPolicy="off" paddingBottom="0" width="100%" height="100%">
					<!--mx:FormItem label="{titleLabel}" styleName="WidgetText" width="100%">
						<mx:TextInput id="txtTitle" text="{title}"/>
					</mx:FormItem-->
					<!--mx:FormItem label="{subtitleLabel}" styleName="WidgetText" width="100%">
						<mx:TextInput id="txtSubtitle" text="{subtitle}"/>
					</mx:FormItem-->
					<mx:HBox horizontalAlign="center" width="100%">
						<!--mx:Button label="{submitLabel}" click="printMap()" icon="{printIcon}" /-->
						<!--mx:VBox>
							<mx:Button label="locale en" click="{Application.application.setLocale('en_GB')}" />
							<mx:Button label="locale da" click="{Application.application.setLocale('da_DK')}" />
							<mx:Button label="locale fr" click="{Application.application.setLocale('fr_FR')}" />						
						</mx:VBox-->							
						<mx:Image click="{printMap()}" source="{ICON_URL + 'i_print.png'}" useHandCursor="true" buttonMode="true" toolTip="{submitLabel}" width="40" height="40"/>
						<mx:Spacer width="10" />
						<mx:Image click="{createPDF()}" source="{ICON_URL + 'i_pdf.png'}" useHandCursor="true" buttonMode="true" toolTip="{submitPDFLabel}" width="40" height="40"/>
						<mx:Spacer width="10" />
						<mx:Image click="{createPNG()}" source="{ICON_URL + 'i_savepng.png'}" useHandCursor="true" buttonMode="true" toolTip="{submitPNGLabel}" width="40" height="40"/>
					
					</mx:HBox>
				</mx:Form>
			</mx:VBox>
			<!-- legend  -->
			<mx:VBox width="100%" height="100%" verticalGap="-1" cornerRadius="5">
				<mx:HBox id="boxMessage"  width="100%">
					<mx:SWFLoader id="swfMessage" source="com/esri/solutions/flexviewer/assets/flash/loader.swf" visible="false" />
					<mx:Text id="txtMessage" text="" styleName="WidgetText" width="90%"/>
				</mx:HBox>
				<mx:Repeater id="legendRepeater">
					<widgets:layerLegendData infoData="{legendRepeater.currentItem}"/>
				</mx:Repeater>
			</mx:VBox>
			<!-- end legend  -->
		</mx:ViewStack>
	</WidgetTemplate>

</BaseWidget>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%"
	verticalGap="1" xmlns:Gazetteer="eu.europa.eea.widgets.Gazetteer.*" xmlns:widgets="com.esri.solutions.flexviewer.widgets.*">
	
	<mx:Metadata>
		[Event(name="removeRecord", type="flash.events.Event")]
	</mx:Metadata>
		
	<mx:Script>
		<![CDATA[
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Multipoint;
			import com.google.maps.services.Placemark;
			import com.esri.ags.geometry.Extent;
			import mx.collections.ArrayCollection;
			import com.esri.ags.Graphic;
			import com.esri.solutions.flexviewer.BaseWidget;
			import com.esri.ags.symbol.PictureMarkerSymbol;
			import com.esri.ags.layers.GraphicsLayer;
			import mx.utils.StringUtil;
			
						
			private var baseWidget:BaseWidget;
			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();
			private var generalViewExtentSize:Number = 2;
			private var hitimer:uint;
					
			[Bindable]
			private var results:ArrayCollection = new ArrayCollection();
			private var resultGraphics:Dictionary = new Dictionary();
			
			[Bindable]
			public var zoomScale:Number;
			
			[Bindable]
			public var selectionLabel:String = "Showing {0} locations ...";
			[Bindable]
			public var clearLabel:String = "Clear results";
			
			[Embed(source="eu/europa/eea/assets/images/icons/i_clear_noborder.png")]
			[Bindable]			
			public var Icon_reset:Class;
			
			
			public function init(baseWidget:BaseWidget):void
			{
				this.baseWidget = baseWidget;
				graphicsLayer.symbol = new PictureMarkerSymbol(baseWidget.configXML.mapIcon, 30, 30);
				baseWidget.map.addLayer(graphicsLayer);
			}
			
			private function showLocationsMessage():void
			{
				message.text = StringUtil.substitute(selectionLabel, results.length);
			} 
			
			public function addLocations(locations:Array):void
			{
				var pointArray:Array = new Array();
				for each (var location:Placemark in locations)
				{
					var result:GazetteerResultData = new GazetteerResultData(location);
					if(baseWidget.map.spatialReference.wkid == 102100)
					{
						result.mapPoint = WebMercatorUtil.geographicToWebMercator(result.mapPoint) as MapPoint;
					}
					results.addItemAt(result, 0);
					addGraphic(result);
					pointArray.push(result.mapPoint);
					
				}
				showLocationsMessage();				
				if(locations.length < 2)
				{					
					if (baseWidget.map.scale > zoomScale)
					{
						baseWidget.map.scale = zoomScale;
					}					
					baseWidget.map.centerAt(result.mapPoint);
				}
				else
				{
					var multi:Multipoint = new Multipoint(pointArray);
					baseWidget.map.extent = multi.extent;
				}
				
			}	
			
			private function addGraphic(result:GazetteerResultData):void
			{
				var g:Graphic = new Graphic();
				g.geometry = result.mapPoint;
				
				g.attributes = result;
				g.addEventListener(MouseEvent.ROLL_OVER, onMouseOverGraphic)
				graphicsLayer.add(g);
				resultGraphics[result.title] = g;
			}
			
			private function onMouseOverGraphic(event:MouseEvent):void
			{
				var g:Graphic = event.currentTarget as Graphic;
				var resultData:GazetteerResultData = g.attributes as GazetteerResultData;
				baseWidget.showInfoWindow(createInfopopupData(resultData));
			}
			
		
			private function createInfopopupData(resultData:GazetteerResultData):Object
			{
				var infoData:Object = new Object();
 				infoData.title = resultData.title;
 				infoData.showSdfButton = false;
 				infoData.point = resultData.mapPoint;
				return infoData;
			}
				
			
			private function mouseOverRecord(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				clearTimeout(hitimer);
				hitimer = setTimeout(showHighlight, 800, [infoData]);
			}			
			
			private function mouseOutRecord():void
			{
				clearTimeout(hitimer);
				baseWidget.showInfoWindow(null);
			}			
			private function showHighlight(params:Array):void
			{
				var infoData:Object = params[0];
				if(infoData.mapPoint)infoData.point = infoData.mapPoint
				var pt:MapPoint = infoData.point;
				if (!baseWidget.map.extent.contains(pt))
					baseWidget.map.centerAt(pt);
				baseWidget.showInfoWindow(params[0]);
			}	
			private function clickRecord(event:MouseEvent):void
			{
				var infoData:Object = event.currentTarget.infoData;
				var pt:MapPoint = infoData.mapPoint;
				if (baseWidget.map.scale > zoomScale)
					baseWidget.map.scale = zoomScale;
				baseWidget.map.centerAt(pt);
			}			
				
			
			private function clear():void
			{
				clearTimeout(hitimer);
				results.removeAll();
				resultGraphics = new Dictionary();
				graphicsLayer.clear();
				showLocationsMessage();
			}
			
		]]>
	</mx:Script>
	
	<mx:HBox width="100%">
		<mx:Text id="message" styleName="WidgetText"  />	
		<mx:Spacer width="100%" />
		<mx:Image source="{Icon_reset}" 
			width="20" height="20" 
			toolTip="{clearLabel}"
			useHandCursor="true" buttonMode="true"
			click="clear()" />
		<mx:Spacer width="10" />
	</mx:HBox>
	
	<mx:VBox width="100%" height="100%" verticalGap="1">
		<mx:Repeater id="gRepeater" dataProvider="{results}">
			<widgets:RecordData infoData="{gRepeater.currentItem}" mouseOver="mouseOverRecord(event)" mouseOut="mouseOutRecord()" click="clickRecord(event)"/>
		</mx:Repeater>
	</mx:VBox>
</mx:VBox>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ServicesSoap", Namespace="http://eea.europa.eu/Services")]
public partial class EEAServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback SqlExecuteOperationCompleted;
    
    private System.Threading.SendOrPostCallback LDAPAuthenticationCheckOperationCompleted;
    
    private System.Threading.SendOrPostCallback XmlRouterOperationCompleted;
    
    /// <remarks/>
    public EEAServices() {
        this.Url = "http://dataconnector.eea.europa.eu/SoapServices/Services.asmx";
    }
    
    /// <remarks/>
    public event SqlExecuteCompletedEventHandler SqlExecuteCompleted;
    
    /// <remarks/>
    public event LDAPAuthenticationCheckCompletedEventHandler LDAPAuthenticationCheckCompleted;
    
    /// <remarks/>
    public event XmlRouterCompletedEventHandler XmlRouterCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eea.europa.eu/Services/SqlExecute", RequestNamespace="http://eea.europa.eu/Services", ResponseNamespace="http://eea.europa.eu/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object SqlExecute(string usr, string pwd, string server, string database, string sql, string name) {
        object[] results = this.Invoke("SqlExecute", new object[] {
                    usr,
                    pwd,
                    server,
                    database,
                    sql,
                    name});
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSqlExecute(string usr, string pwd, string server, string database, string sql, string name, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SqlExecute", new object[] {
                    usr,
                    pwd,
                    server,
                    database,
                    sql,
                    name}, callback, asyncState);
    }
    
    /// <remarks/>
    public object EndSqlExecute(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void SqlExecuteAsync(string usr, string pwd, string server, string database, string sql, string name) {
        this.SqlExecuteAsync(usr, pwd, server, database, sql, name, null);
    }
    
    /// <remarks/>
    public void SqlExecuteAsync(string usr, string pwd, string server, string database, string sql, string name, object userState) {
        if ((this.SqlExecuteOperationCompleted == null)) {
            this.SqlExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSqlExecuteOperationCompleted);
        }
        this.InvokeAsync("SqlExecute", new object[] {
                    usr,
                    pwd,
                    server,
                    database,
                    sql,
                    name}, this.SqlExecuteOperationCompleted, userState);
    }
    
    private void OnSqlExecuteOperationCompleted(object arg) {
        if ((this.SqlExecuteCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SqlExecuteCompleted(this, new SqlExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eea.europa.eu/Services/LDAPAuthenticationCheck", RequestNamespace="http://eea.europa.eu/Services", ResponseNamespace="http://eea.europa.eu/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object LDAPAuthenticationCheck(string username, string password, string LDAPPath, string Role) {
        object[] results = this.Invoke("LDAPAuthenticationCheck", new object[] {
                    username,
                    password,
                    LDAPPath,
                    Role});
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginLDAPAuthenticationCheck(string username, string password, string LDAPPath, string Role, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("LDAPAuthenticationCheck", new object[] {
                    username,
                    password,
                    LDAPPath,
                    Role}, callback, asyncState);
    }
    
    /// <remarks/>
    public object EndLDAPAuthenticationCheck(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void LDAPAuthenticationCheckAsync(string username, string password, string LDAPPath, string Role) {
        this.LDAPAuthenticationCheckAsync(username, password, LDAPPath, Role, null);
    }
    
    /// <remarks/>
    public void LDAPAuthenticationCheckAsync(string username, string password, string LDAPPath, string Role, object userState) {
        if ((this.LDAPAuthenticationCheckOperationCompleted == null)) {
            this.LDAPAuthenticationCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLDAPAuthenticationCheckOperationCompleted);
        }
        this.InvokeAsync("LDAPAuthenticationCheck", new object[] {
                    username,
                    password,
                    LDAPPath,
                    Role}, this.LDAPAuthenticationCheckOperationCompleted, userState);
    }
    
    private void OnLDAPAuthenticationCheckOperationCompleted(object arg) {
        if ((this.LDAPAuthenticationCheckCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LDAPAuthenticationCheckCompleted(this, new LDAPAuthenticationCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eea.europa.eu/Services/XmlRouter", RequestNamespace="http://eea.europa.eu/Services", ResponseNamespace="http://eea.europa.eu/Services", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object XmlRouter(string strUrl, string strData) {
        object[] results = this.Invoke("XmlRouter", new object[] {
                    strUrl,
                    strData});
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginXmlRouter(string strUrl, string strData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("XmlRouter", new object[] {
                    strUrl,
                    strData}, callback, asyncState);
    }
    
    /// <remarks/>
    public object EndXmlRouter(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void XmlRouterAsync(string strUrl, string strData) {
        this.XmlRouterAsync(strUrl, strData, null);
    }
    
    /// <remarks/>
    public void XmlRouterAsync(string strUrl, string strData, object userState) {
        if ((this.XmlRouterOperationCompleted == null)) {
            this.XmlRouterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnXmlRouterOperationCompleted);
        }
        this.InvokeAsync("XmlRouter", new object[] {
                    strUrl,
                    strData}, this.XmlRouterOperationCompleted, userState);
    }
    
    private void OnXmlRouterOperationCompleted(object arg) {
        if ((this.XmlRouterCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.XmlRouterCompleted(this, new XmlRouterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void SqlExecuteCompletedEventHandler(object sender, SqlExecuteCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SqlExecuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SqlExecuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void LDAPAuthenticationCheckCompletedEventHandler(object sender, LDAPAuthenticationCheckCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class LDAPAuthenticationCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal LDAPAuthenticationCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void XmlRouterCompletedEventHandler(object sender, XmlRouterCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class XmlRouterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal XmlRouterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas	xmlns:mx				="http://www.adobe.com/2006/mxml" 
			width					="100%" 
			height					="100%"
    		backgroundAlpha			="0"
    		horizontalScrollPolicy	="off" 
    		verticalScrollPolicy	="off"
    		creationComplete		="init()">

	<mx:Script>
		<![CDATA[
		
			import mx.controls.Alert;
			import com.esri.ags.Map;
			import com.esri.solutions.flexviewer.AppEvent;
			import com.esri.solutions.flexviewer.BaseWidget;
		    import com.esri.solutions.flexviewer.IBaseWidget;
		    import com.esri.solutions.flexviewer.utils.Hashtable;
		    import mx.events.ModuleEvent;
		    import mx.modules.ModuleManager;
		    import mx.modules.IModuleInfo;
				
		    private var configData:ConfigData;
		    
			private var map:Map;
			
			private var moduleTable:Hashtable = new Hashtable();
			
			private var widgetTable:Hashtable = new Hashtable();
			
			private var info:IModuleInfo;
						     
		    private function init():void
		    {
			    SiteContainer.addEventListener(AppEvent.CONFIG_LOADED, config);
			    SiteContainer.addEventListener(AppEvent.MAP_LOADED, onMapLoad); 
			    SiteContainer.addEventListener(AppEvent.LAYER_LOADED, onLayerLoad);
			    SiteContainer.addEventListener(AppEvent.WIDGET_MENU_CLICKED, widgetMenuClicked);
		    }		    
		    
		    private function config(event:AppEvent):void
		    {    	
		    	configData = event.data as ConfigData;
		    }		    
		
		    private function onMapLoad(event:AppEvent):void
		    {
		        map = event.data as Map;
		    }		    
		    
		    private function onLayerLoad(event:AppEvent):void
		    {
		        for (var i:Number = 0; i < configData.configWidgets.length; i++)
		        {
		        	var id:Number  = configData.configWidgets[i].id;
		        	var preload:String = configData.configWidgets[i].preload;
		        	if (preload == "true")
		        		SiteContainer.dispatchEvent(new AppEvent(AppEvent.WIDGET_MENU_CLICKED, false, false, id));			
		        }
		    }		    
		    
		    private function widgetMenuClicked(event:AppEvent):void
		    {
		    	var id:Number = event.data as Number;
		    	var label:String = configData.configWidgets[id].label;
		    	var icon:String = configData.configWidgets[id].icon;
		    	var config:String = configData.configWidgets[id].config;
		    	var url:String = configData.configWidgets[id].url;
		    	
		    	//widget loaded    	
		    	var widget:IBaseWidget;
		    	if (widgetTable.containsKey(id))
		    	{
		    		widget = widgetTable.find(id) as IBaseWidget;
		    		widget.setState(BaseWidget.STATE_MAXIMIZED);
		    	}
		    	else
		    	{
		    		//module loaded
		    		if (moduleTable.containsKey(url))
		    		{
		    			var modInfo:IModuleInfo = moduleTable.find(url) as IModuleInfo;
		    			widget = modInfo.factory.create() as IBaseWidget;
		    			widget.setId(id);
		    			widget.setTitle(label);
		    			widget.setIcon(icon);
		    			widget.setConfig(config);
		    			widget.setConfigData(configData);
		    			widget.setMap(map);
		   				var widgetDO:DisplayObject = widget as DisplayObject;
						addChild(widgetDO);
		    			widgetTable.add(id, widget);
		    		}
		    		else
		    		{
		    			loadWidget(id, url);
		    		}
		    	}
		    }		    
		    
		    private function loadWidget(id:Number, url:String):void
		    {
		    	info = ModuleManager.getModule(url);
		    	info.data = {id: id};
		    	info.addEventListener(ModuleEvent.READY, widgetReadyHandler);           
				info.load();
				this.cursorManager.setBusyCursor();   
		    }		    
		    
		    private function widgetReadyHandler(event:ModuleEvent):void
		    {
		    	var info:IModuleInfo = event.module;
		    	moduleTable.add(info.url, info);
		    	var id:Number = info.data.id;
		    	var label:String = configData.configWidgets[id].label;
		    	var icon:String = configData.configWidgets[id].icon;
		    	var config:String = configData.configWidgets[id].config;
		    	
		    	var widget:IBaseWidget = info.factory.create() as IBaseWidget;
		    	widget.setId(id);
		    	widget.setTitle(label);
		    	widget.setIcon(icon);
		    	widget.setConfig(config);
		    	widget.setConfigData(configData);
		    	widget.setMap(map);
		    	widgetTable.add(id, widget);
		    	var widgetDO:DisplayObject = widget as DisplayObject;
				addChild(widgetDO);
				this.cursorManager.removeBusyCursor();   
		    }		
		
			private function widgetError(event:ModuleEvent):void
		    {
		    	this.cursorManager.removeBusyCursor();   
		    	Alert.show(event.errorText);
		    }
		    public function getLoadedWidgets():Hashtable{		    	
		    	return widgetTable;
		    }
		    
		]]>
	</mx:Script> 
	   
</mx:Canvas>

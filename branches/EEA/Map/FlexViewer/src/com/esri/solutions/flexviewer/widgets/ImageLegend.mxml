<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox	xmlns:mx	="http://www.adobe.com/2006/mxml" 
			xmlns:atkins	="dk.atkins.*" 
			verticalGap	="0" 
			width		="100%"
			creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import mx.collections.ArrayCollection;
			import mx.graphics.ImageSnapshot;
			import mx.containers.ViewStack;
			import com.esri.solutions.flexviewer.BaseWidget;
			import mx.controls.Image;
			import mx.controls.Label;

			import com.esri.solutions.flexviewer.ConfigData;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;	
			import flash.external.ExternalInterface;
			
			
			
			
			[Bindable]
			private var _legends:Array;
			
			[Bindable]
			public var parentWidget:BaseWidget;
			
			[Bindable]
			public var viewStack:ViewStack;
			
			private var _legendUrlNamePairs:String;
			
			private  var locale:String = "";
			
			public function init():void{

				ExternalInterface.addCallback("addLegend", addLegend);
				ExternalInterface.addCallback("clearLegends", clearLegends);			
				resourceManager.addEventListener(Event.CHANGE, updateLocale);
			}
						
			public function set legends(value:String):void
			{
				_legendUrlNamePairs = value;
				_legends = value.split(",");				
								
			 	for (var i:int = 0; i < _legends.length; i ++){
			 		var legendNamePair:Array = String(_legends[i]).split(":");
			 		
			 		//add layer name as label
			 		//var layerlabel:Label = new Label();
			 		var layerlabel:Text = new Text(); 
			 		layerlabel.styleName = "MenuItem";
			 		layerlabel.text = legendNamePair[0];
			 		layerlabel.truncateToFit = true;
			 		
			 		addChild(layerlabel);
			 		
			 		//add legend image
			 		var legendImg:Image = new Image();
			 		legendImg.source = legendNamePair[1];
			 		addChild(legendImg);			 		
			 	}
			}
			
			public function get legends():String{
				return _legendUrlNamePairs;
			}
			public function addLegend(layername:String,legendurl:String,layerid:String):void{
				
				
					if(!this.getChildByName(layerid)){
						//var layerlabel:Label = new Label(); 
						var layerlabel:Text = new Text();
				 		layerlabel.styleName = "MenuItem";
			 			layerlabel.truncateToFit = true;
			 			layerlabel.width = this.parentWidget.width - 130;
				 		layerlabel.text = resourceManager.getString('FilterAllWidgetStrings', layerid )|| resourceManager.getString('ControllerStrings', layername.split(" ").join("_")) || layername;
				 		layerlabel.name = layerid;
				 		layerlabel.id = layerid
				 		addChild(layerlabel);
				 		
				 		//add legend image
				 		var legendImg:Image = new Image();
				 		locale = resourceManager.localeChain[0] || "";
				 		legendurl = legendurl.replace("[locale]", locale);
				 		legendImg.source = legendurl;
				 		legendImg.name = layerid+"_img";
				 		addChild(legendImg);				 		
				 	
				 		
				 	}
				 
			}
			
			public function removeLegend(layerid:String):Boolean{
				if(this.numChildren > 0){
					if(this.getChildByName(layerid)){
						this.removeChild(this.getChildByName(layerid));
						this.removeChild(this.getChildByName(layerid+"_img"));
					}
				}
				if(this.numChildren == 0){
					WidgetEffects.flipWidget(parentWidget,viewStack, "selectedIndex", 0, 400);
				}
			
				return (this.numChildren > 0);
			}
			
			public function clearLegends():void {
				
					this.removeAllChildren();
					WidgetEffects.flipWidget(parentWidget,viewStack, "selectedIndex", 0, 400);
			}
			
			public function prettyPrint():BitmapData {
				return ImageSnapshot.captureBitmapData(this);;
			}
			
			private function updateLocale(event:Event):void{
				for (var i:int =  0 ; i < this.numChildren; i++){
					var diso:DisplayObject = this.getChildAt(i);
					/*if(diso is Label){
						var la:Label = Label(diso);
						la.text = resourceManager.getString('FilterAllWidgetStrings', la.id )|| resourceManager.getString('ControllerStrings', la.name.split(" ").join("_")) || la.name;
					}*/
					if(diso is Text){
						var txt:Text = Text(diso);
						txt.text = resourceManager.getString('FilterAllWidgetStrings', txt.id )|| resourceManager.getString('ControllerStrings', txt.name.split(" ").join("_")) || txt.name;
					}
					if(diso is Image){
						var img:Image = Image(diso);
						img.source = img.source.replace(locale,resourceManager.localeChain[0]);
					}
				 		
				}
				locale = resourceManager.localeChain[0] || "";
				//Label(this.getChildByName(layername)).text 
			}
		
		]]>
	</mx:Script>
	
	<mx:Metadata>
        [ResourceBundle("FilterAllWidgetStrings")]
        [ResourceBundle("ControllerStrings")]
    </mx:Metadata> 	
	
</mx:VBox>

<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<BaseWidget	xmlns				="com.esri.solutions.flexviewer.*" 
			xmlns:mx			="http://www.adobe.com/2006/mxml" 
			xmlns:widgets		="com.esri.solutions.flexviewer.widgets.*"
			x					="600" 
			y					="300" 
			widgetConfigLoaded	="init()">
	
	
	<mx:Script>
		<![CDATA[
			import mx.controls.List;
			
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.LayerInfo;			
			import com.esri.ags.events.MapEvent;

			
			import com.esri.ags.Map;
			import com.esri.solutions.flexviewer.ConfigData;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			import mx.controls.Alert;
			import mx.collections.*;
			import com.esri.solutions.flexviewer.components.toc.utils.MapUtil;
			import mx.core.Application;
			import flash.external.ExternalInterface;
			
			import dk.atkins.ZoomUtil;


			
			private function init():void
			{
				ExternalInterface.addCallback("setLayersVisibility", setLayersVisibility);
				ExternalInterface.addCallback("setAllLayersDefinition", setAllLayersDefinition);
				ExternalInterface.addCallback("removeAllLayersDefinition", removeAllLayersDefinition);
				ExternalInterface.addCallback("includeLayers", includeLayers);
				map.addEventListener(MapEvent.LAYER_REORDER, zoomTofeatures);
				map.addEventListener(MapEvent.LAYER_ADD, zoomTofeatures);
			}			
			
			private function getBasemaps():ArrayCollection
			{
				var baseMaps:ArrayCollection = new ArrayCollection();
				for (var i:Number = 0; i < configData.configBasemaps.length; i++)
		        {
		        	baseMaps.addItem(configData.configBasemaps[i].id);
		        }
				return baseMaps;
			}			
			
			private function getLayers():Array
			{
				var basemapCount:Number = configData.configBasemaps.length;
				var layerArray:Array = [];
				for (var i:Number = map.layerIds.length -1; i >= basemapCount; i--)
				{
					var layer:Layer = map.getLayer(map.layerIds[i]);
					if (!(layer is GraphicsLayer))
						layerArray.push(layer);
				}
				return layerArray;
			}
						
		
			private function getLayerLabels(_mapServiceLayer:ArcGISDynamicMapServiceLayer, _layerids:Array):Array{
				for(var h:int = 0; h < _layerids.length; h++){
					_layerids[h] = MapUtil.getLayerLabel(_mapServiceLayer,_layerids[h]);
				}
				return _layerids;		
			}
			
			private function getLayerIds(_mapServiceLayer:ArcGISDynamicMapServiceLayer, _layernames:Array):Array{
				for(var h:int = 0; h < _layernames.length; h++){
					_layernames[h] = MapUtil.getLayerId(_mapServiceLayer,_layernames[h]);
				}
				return _layernames;		
			}
			
			/*setLayersVisibility:
			* 
			*/ 
			private function setLayersVisibility(mapServiceName:String,layers:String="",_turnOthersOff:String = "false",_turnon:String = "true"):void
			{
				var turnOthersOff:Boolean = _turnOthersOff == "true";
				var turnon:Boolean = _turnon == "true";				
				var mapServiceLayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(map.getLayer(mapServiceName));
				if(mapServiceLayer){
					mapServiceLayer.visible = turnon;
				}
								
			}
			
			private function removeAllLayersDefinition():void{
					setAllLayersDefinition("");
			}
			//sets definition of all layers - note the fields have to match for this to work.
			private function setAllLayersDefinition(definition:String = ""):Boolean{
				try{
					var _maplayer:ArcGISDynamicMapServiceLayer;
					for each (var layerId:String in map.layerIds) {
						var _layer:Layer = map.getLayer(layerId);
						if(_layer is ArcGISDynamicMapServiceLayer){
							_maplayer = ArcGISDynamicMapServiceLayer(_layer);
							var _layerdefinitions:Array = new Array(_maplayer.layerInfos.length);
							var staticDefinitions:Array;
							if(Application.application.staticLayerDefinitions.containsKey(layerId)){
								staticDefinitions = Application.application.staticLayerDefinitions.find(layerId) as Array;
							}
							for(var i:int = 0; i < _layerdefinitions.length; i++){
								if(staticDefinitions){									
									if(staticDefinitions[i] != undefined){ 
										_layerdefinitions[i] = staticDefinitions[i];
									}
									else{
										_layerdefinitions[i] =  definition;
									} 
									if(definition != "" ){
										if(_layerdefinitions[i].toString().indexOf("[wherevalue]") > -1){
											_layerdefinitions[i] =  _layerdefinitions[i].toString().replace("[wherevalue]", " AND " + definition);
										}
										else{
											_layerdefinitions[i]  += " AND " + definition;
										}
									}
								}
								else _layerdefinitions[i] = definition;
							}
							//reset 
							staticDefinitions = null;
							_maplayer.layerDefinitions = _layerdefinitions;
							
							ExternalInterface.call("console.log", "Flex map set layer definition: " + definition);
						}										 
					}
					zoomMapTofeatures(_maplayer);	

				}catch (exc:Error)	{
					//
					ExternalInterface.call("console.log", "Set Definition: " + definition + "\n ERROR: " + exc.name + " " + exc.message + " \n" + exc.getStackTrace());
					return false;
				}
				return true;
			}
			
			private function includeLayers(layers:String = "-1", setvisibility:String = "true", excludeOthers:String = "true"):Boolean
			{ 

				var layerArr:Array;
				var _setvisibility:Boolean = setvisibility == "true";
					var visiblemaplayers:Object = new Object();
				
				if(layers == "-1" || layers == ""){
					layerArr = map.layerIds;
					var basemaps:ArrayCollection = getBasemaps();
					for(var h:int = 0; h < layerArr.length;h++){
						if(basemaps.contains(layerArr[h])){
							layerArr.splice(h,1);
							h--;
						}
					}
				}
				else{
					layerArr = layers.split(",");
				} 		    
		      
				if(_setvisibility){
					var vis:Boolean = true;
					var thebasemaps:ArrayCollection = getBasemaps();
					for(var index:int = 0; index < layerArr.length; index ++){
		        		 visiblemaplayers[layerArr[index]] = _setvisibility;
		       	 	}
		       	 	for (var j:int = 0; j < map.layerIds.length; j++){
		       	 		if(visiblemaplayers[map.layerIds[j]] || thebasemaps.contains(map.layerIds[j])){
		       	 			vis = true;
		       	 			if(thebasemaps.contains(map.layerIds[j])){
		       	 				vis = map.getLayer(map.layerIds[j]).visible;
		       	 			}
		       	 		}else{
		       	 			vis = false;
		       	 		} 
		       	 		map.getLayer(map.layerIds[j]).visible = vis;
		       	 	}
				}
				return true;				 
			  }
			
			private function zoomTofeatures(e:MapEvent):void{
				if(e.layer is ArcGISDynamicMapServiceLayer){
					var agdmsl:ArcGISDynamicMapServiceLayer = e.layer as ArcGISDynamicMapServiceLayer;
					var zoomUtil:ZoomUtil = new ZoomUtil();
					zoomUtil.getFeatureGeometry(map,"");//,agdmsl.url + "/0");
				}					
			}
			private function zoomMapTofeatures(ml:ArcGISDynamicMapServiceLayer,definition:String=""):void{
				var zoomUtil:ZoomUtil = new ZoomUtil();
				zoomUtil.getFeatureGeometry(map,definition);//,ml.url + "/0");		
			}

			
		]]>
	</mx:Script>
	
	<WidgetTemplate id="wTemplate" >
		<mx:VBox>			
			<!--mx:Button label="filter" id="setDef_btn" click="setAllLayersDefinition('FacilityReportID=66666')"/>
			<mx:Button label="filter" id="setDefbtn" click="setAllLayersDefinition('FacilityReportID=26606')"/>
			<mx:Button label="include sector 3" id="includebtn" click="includeLayers('sector3')"/>
			<mx:Button label="include all sectors" id="includeAllbtn" click="includeLayers('-1')"/-->										
		</mx:VBox>
	</WidgetTemplate>
	
</BaseWidget>

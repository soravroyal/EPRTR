<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
// Copyright Â© 2008 ESRI
//
// All rights reserved under the copyright laws of the United States.
// You may freely redistribute and use this software, with or
// without modification, provided you include the original copyright
// and use restrictions.  See use restrictions in the file:
// <install location>/FlexViewer/License.txt
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox	xmlns:mx	="http://www.adobe.com/2006/mxml" 
			xmlns:atkins	="dk.atkins.*" 
			verticalGap	="0" 
			width		="100%"
			creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import com.esri.ags.events.LayerEvent;
			import mx.core.Application;
			import dk.atkins.filterChangeEvent;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.LayerInfo;			
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.Map;
			import com.esri.solutions.flexviewer.ConfigData;
			import com.esri.solutions.flexviewer.utils.WidgetEffects;
			
			import mx.collections.*;
	
			import flash.external.ExternalInterface;
			import com.esri.solutions.flexviewer.components.toc.utils.MapUtil;
			import com.esri.solutions.flexviewer.components.toccustom.TOCCustom;
			import com.esri.solutions.flexviewer.components.toccustom.toccustomclasses.TocCustomMapLayerItem;		
			import com.esri.solutions.flexviewer.components.toccustom.toccustomclasses.TocCustomLayerInfoItem;		
			import com.esri.solutions.flexviewer.components.toccustom.toccustomclasses.TocCustomItem;
			
			import dk.atkins.ZoomUtil;
			
			
			[Bindable]
			private var map:Map;
			
			[Bindable]
			public var basemaps:ArrayCollection;
			
			[Bindable]
			public var excludeMapLayersFromFilter:Object;
			
			[Bindable]
			public var zoomToFilter:Boolean = false;
			
			private var _toc:TOCCustom;
			private var _filterGroups:XMLList;
			
			public var initializedComplete:Boolean = false;
			
			public function init():void{
				initializedComplete = true;
			 	map = _toc.map;
				ExternalInterface.addCallback("setLayerDefinition", setLayerDefinition);				
				//ExternalInterface.addCallback("setAllLayersDefinition", setAllLayersDefinition);
				ExternalInterface.addCallback("removeAllLayersDefinition", removeAllLayersDefinition);				
				ExternalInterface.addCallback("setUIFilter", setFilter);
				ExternalInterface.addCallback("setUIFilters", setFilters);
				ExternalInterface.addCallback("getUIFilter", getFilter);
				
				
			}
			public function get toc():TOCCustom
			{
				return _toc;
			}
			
			public function set toc(value:TOCCustom):void
			{
				_toc = value;				
			 	map = _toc.map;
			}
			public function get filterGroups():XMLList
			{
				return _filterGroups;
			}
			
			public function set filterGroups(value:XMLList):void
			{
				_filterGroups = value;
				filterControls.filterGroups = value;
			}

			
			//set filters on all layers when filtercontrols are changed
			private function setDefinition(evt:filterChangeEvent):void{
				var definition:String = evt.data.toString();
				setAllLayersDefinition(definition);
				
			}
			private function setFilter(filter:String, _select:String = "true"):void{				
				var select:Boolean = _select == "true";
				filterControls.setFilter(filter,select);
				ExternalInterface.call("sendToJavaScript","set filter : " + filter);
				
			}
			private function setFilters(filters:String):void
			{
				var filterArray:Array = filters.split(",");
				for(var i:int = 0; i < filterArray.length; i++){
					var filterValuePair:Array = filterArray[i].split(":");
					var filter:String = filterValuePair[0];
					var select:Boolean = true;
					if(filterValuePair.length > 1){
						select  = filterValuePair[1] == "true";
					}
					filterControls.setFilter(filter, select);
				}
				
			}
			private function getFilter():String
			{
				return filterControls.getFilter();
			}
			/*setLayerDefinition:
			*
			* 
			* 
			*/ 
			private function setLayerDefinition(mapServiceName:String,layerName:String="", definition:String = ""):void
			{
			
				
				if(!map){
					map = _toc.map;
				} 
				if(map.getLayer(mapServiceName) is ArcGISDynamicMapServiceLayer){
				
					var serviceLayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(map.getLayer(mapServiceName));
					var layerid:Number;					
					if(isNaN(Number(layerName))){
						layerid = MapUtil.getLayerId(serviceLayer,layerName);
					}else{
						layerid = Number(layerName);
					} 
						
					if(!excludeMapLayersFromFilter || !excludeMapLayersFromFilter[layerid]){
											 
						var _layerDefinitions:Array;
						if(serviceLayer.layerDefinitions) {
							_layerDefinitions = serviceLayer.layerDefinitions;
						}else{
							_layerDefinitions = new Array();
						}
						while(layerid > _layerDefinitions.length){
		        			_layerDefinitions.push("");
		        		}
		        		var staticDefinitions:Array;
						if(Application.application.staticLayerDefinitions.containsKey(mapServiceName)){
							staticDefinitions = Application.application.staticLayerDefinitions.find(mapServiceName) as Array;
						}
						var concatenatestr:String =  " AND ";
						if(staticDefinitions && staticDefinitions[layerid]){
							if(staticDefinitions[layerid].toString().indexOf("[wherevalue]") > -1){
								if(staticDefinitions[layerid].toString().toLowerCase().indexOf("select ") != -1 && staticDefinitions[layerid].toString().toLowerCase().indexOf(" where ") == -1 ) concatenatestr = ' WHERE '
								definition =  staticDefinitions[layerid].toString().replace("[wherevalue]", concatenatestr + definition);
							}else{	
								if(staticDefinitions[layerid].toLowerCase().indexOf("select ") != -1 && staticDefinitions[layerid].toLowerCase().indexOf(" where ") == -1 ) concatenatestr = ' WHERE '							
								definition =  staticDefinitions[layerid]+ concatenatestr + definition;
							}						
						}
						//reset 
						staticDefinitions = null;
		        		//_layerDefinitions[layerid] = new XMLList(new XML(definition));
		        		_layerDefinitions[layerid] = definition;
		        		
		        		serviceLayer.layerDefinitions = _layerDefinitions;
		        		serviceLayer.refresh();
		  			}
	  			}
        		
			}
			private function removeAllLayersDefinition():void{
				ExternalInterface.call("console.log", "LayerFilter.removeAllLayersDefinition: Removed all where clauses");
					setAllLayersDefinition("");
			
			}
			private var layerdefinition:String;
			public function setAllLayersDefinition(definition:String = ""):void
			{
				ExternalInterface.call("console.log","setAllLayersDefinition " +definition );
				try
				{
					if(!map){
						map = _toc.map;
					}
					
					layerdefinition = definition;
					
					for each (var layerId:String in map.layerIds) {
						if(!excludeMapLayersFromFilter || excludeMapLayersFromFilter[layerId] != true){
							if(!basemaps.contains(layerId)){
								var _layer:Layer = map.getLayer(layerId);
								if(_layer is ArcGISDynamicMapServiceLayer){
									var _maplayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(_layer);
									var _layerdefinitions:Array;
									if(_maplayer.layerInfos)
									{
										_layerdefinitions = new Array(_maplayer.layerInfos.length);
										setTheAllLayersDefinition(_layerdefinitions, layerdefinition, _maplayer);
									} 
									else
									{
										_maplayer.addEventListener(LayerEvent.LOAD,layerload_handler);
									}
								}
							}
						}
					}
					
					if(zoomToFilter) {
						zoomMapTofeatures();
					}
					
				}catch (exc:Error)	{
				//
					ExternalInterface.call("console.log",exc.message + " " + exc.getStackTrace());
					trace(exc.message)
					return //false;
				}
				//return true;									
			}
			private function layerload_handler(e:LayerEvent):void
			{
				ExternalInterface.call("console.log", "layerload_handler");
			
				var mLayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(e.layer);
				var _layerdefinitions:Array = new Array(mLayer.layerInfos.length);
				setTheAllLayersDefinition(_layerdefinitions, layerdefinition,mLayer);
				mLayer.removeEventListener(LayerEvent.LOAD,layerload_handler);
				if(zoomToFilter) {
						zoomMapTofeatures();
					}
			}
			
			//sets definition of all layers - note the fields have to match for this to work.
			public function setTheAllLayersDefinition(_layerdefinitions:Array, definition:String = "", _maplayer:ArcGISDynamicMapServiceLayer = null):Boolean
			{
				ExternalInterface.call("console.log","setTheAllLayersDefinition " +definition + " " + _maplayer.id );
				try
				{
					var staticDefinitions:Array;
					if(Application.application.staticLayerDefinitions && Application.application.staticLayerDefinitions.containsKey(_maplayer.id
					)){
						staticDefinitions = Application.application.staticLayerDefinitions.find(_maplayer.id) as Array;
					}
					for(var i:int = 0; i < _layerdefinitions.length; i++){
						
						if(staticDefinitions && staticDefinitions[i]){
						//trace(layerId + ", length: " +staticDefinitions.length + " staticDefinitions " + staticDefinitions.join(", "));
							var concatenatestr:String =  " AND ";
							var statStr:String = staticDefinitions[i].toString();																		
							_layerdefinitions[i] = statStr.replace("[wherevalue]", ""); 
							if(definition != ""){										
								if(statStr && statStr.toLowerCase().indexOf("[wherevalue]")> -1 ){
									if(statStr.toLowerCase().indexOf("select ") != -1  && statStr.toLowerCase().indexOf(" where ") == -1 ){
										concatenatestr = ' WHERE ';
									} 
									_layerdefinitions[i] =  statStr.replace("[wherevalue]", concatenatestr + definition);
								}
								else{
									if(_layerdefinitions[i].toLowerCase().indexOf("select ") != -1  && _layerdefinitions[i].toLowerCase().indexOf(" where ") == -1 ){
										concatenatestr = ' WHERE ';
									} 
									_layerdefinitions[i]  += concatenatestr + definition;
								}
								
							}
							
						}								
						else{
							_layerdefinitions[i] = definition;
						} 
						
					}
					//reset 
					staticDefinitions = null;
					_maplayer.layerDefinitions = _layerdefinitions;
					
					ExternalInterface.call("console.log", "Flex map layer definition: " + _layerdefinitions);
	
					/*if(zoomToFilter) {
						zoomMapTofeatures();
					}*/
					
				}catch (exc:Error)	{
				//
					ExternalInterface.call("console.log",exc.message + " " + exc.getStackTrace());
					trace(exc.message)
					return false;
				}
				
				return true;
			}
			//sets definition of all layers - note the fields have to match for this to work.
			/*public function setAllLayersDefinition(definition:String = ""):Boolean{
				try{
					if(!map){
						map = _toc.map;
					}
					for each (var layerId:String in map.layerIds) {
						if(!excludeMapLayersFromFilter || excludeMapLayersFromFilter[layerId] != true){
							var _layer:Layer = map.getLayer(layerId);
							if(!basemaps.contains(layerId)){
								if(_layer is ArcGISDynamicMapServiceLayer){
									var _maplayer:ArcGISDynamicMapServiceLayer = ArcGISDynamicMapServiceLayer(_layer);
									var _layerdefinitions:Array = new Array(_maplayer.layerInfos.length);
									var staticDefinitions:Array;
									if(Application.application.staticLayerDefinitions && Application.application.staticLayerDefinitions.containsKey(layerId)){
										staticDefinitions = Application.application.staticLayerDefinitions.find(layerId) as Array;
									}
									for(var i:int = 0; i < _layerdefinitions.length; i++){
										
										if(staticDefinitions && staticDefinitions[i]){
										//trace(layerId + ", length: " +staticDefinitions.length + " staticDefinitions " + staticDefinitions.join(", "));
											var concatenatestr:String =  " AND ";
											var statStr:String = staticDefinitions[i].toString();																		
											_layerdefinitions[i] = statStr.replace("[wherevalue]", ""); 
											if(definition != ""){										
												if(statStr.toLowerCase().indexOf("[wherevalue]")> -1 ){
													if(statStr.toLowerCase().indexOf("select ") != -1  && statStr.toLowerCase().indexOf(" where ") == -1 ){
														concatenatestr = ' WHERE ';
													} 
													_layerdefinitions[i] =  statStr.replace("[wherevalue]", concatenatestr + definition);
												}
												else{
													if(_layerdefinitions[i].toLowerCase().indexOf("select ") != -1  && _layerdefinitions[i].toLowerCase().indexOf(" where ") == -1 ){
														concatenatestr = ' WHERE ';
													} 
													_layerdefinitions[i]  += concatenatestr + definition;
												}
												
											}
											
										}								
										else{
											_layerdefinitions[i] = definition;
										} 
										
									}
									//reset 
									staticDefinitions = null;
									_maplayer.layerDefinitions = _layerdefinitions;
									
									ExternalInterface.call("console.log", "Flex map set layer definition: " + definition);
									ExternalInterface.call("console.log", "Flex map layer definition: " + _layerdefinitions);
								}
							}
						}
					}
					if(zoomToFilter) {
						zoomMapTofeatures();
					}
				
				}catch (exc:Error)	{
					//
					ExternalInterface.call("console.log",exc.message);
					trace(exc.message)
					return false;
				}	
				return true;
			}*/
			private function zoomMapTofeatures(definition:String=""):void{
				var zoomUtil:ZoomUtil = new ZoomUtil();
				//zoom util uses layer definition as default 
				zoomUtil.getFeatureGeometry(map,definition,excludeMapLayersFromFilter,basemaps);//,ml.url + "/0");		
			}
			private function getLayerLabels(_mapServiceLayer:ArcGISDynamicMapServiceLayer, _layerids:Array):Array{
				for(var h:int = 0; h < _layerids.length; h++){
					_layerids[h] = MapUtil.getLayerLabel(_mapServiceLayer,_layerids[h]);
				}
				return _layerids;		
			}
			private function getLayerIds(_mapServiceLayer:ArcGISDynamicMapServiceLayer, _layernames:Array):Array{
				for(var h:int = 0; h < _layernames.length; h++){
					_layernames[h] = MapUtil.getLayerId(_mapServiceLayer,_layernames[h]);
				}
				return _layernames;
			}
			
			
		
		]]>
	</mx:Script>
	
	<mx:VBox>
		<atkins:LayerFilterControls id="filterControls"  filterChange="{setDefinition(event)}" /> 
		<!--mx:Button label="setlayerdef" click="{setAllLayersDefinition(def.text)}" />
		<mx:Button label="removelayerdef" click="{removeAllLayersDefinition()}" />
		<mx:TextInput id="def"  text="FacilityName LIKE '%CHIVASSO%'" /-->
	</mx:VBox>
</mx:VBox>

#! <?xml version="1.0" encoding="utf-8" ?>
#! <WORKSPACE
#    
#    
#    Command-line to run this workspace:
#    
#    
#    C:\apps\FMEx86\fme.exe "S:\Common workspace\Developers\gonzalez\EPRTR\PostProcess\Main.fmw"
#    
#    
#! BEGIN_TCL=""
#! LOG_MAX_PRECISION="Yes"
#! PASSWORD=""
#! FME_BUILD_NUM="15515"
#! WORKSPACE_VERSION="1"
#! HISTORY=""
#! DOC_EXTENTS="1321.01 36.0004"
#! SHOW_INFO_NODES="true"
#! DESCRIPTION=""
#! END_PYTHON=""
#! FME_DOCUMENT_PRIORGUID="28c8492f-b1fb-4ce0-99a1-57fb9a89cba8"
#! REQUIREMENTS=""
#! FME_IMPLICIT_CSMAP_REPROJECTION_MODE="Auto"
#! LOG_MAX_RECORDED_FEATURES="200"
#! FME_GEOMETRY_HANDLING="Enhanced"
#! WARN_INVALID_XFORM_PARAM="Yes"
#! USAGE=""
#! LAST_SAVE_BUILD="FME(R) 2015.1.1.0 (20150715 - Build 15515 - WIN32)"
#! MULTI_WRITER_DATASET_ORDER="BY_ID"
#! ATTR_TYPE_ENCODING="SDF"
#! DESTINATION="NONE"
#! FME_DOCUMENT_GUID="ce2ef7be-2046-4702-b3a6-0ea514ab2950"
#! LOG_FILE=""
#! BEGIN_PYTHON=""
#! CATEGORY=""
#! DESTINATION_ROUTING_FILE=""
#! REQUIREMENTS_KEYWORD=""
#! LEGAL_TERMS_CONDITIONS=""
#! LAST_SAVE_DATE="2016-01-12T16:16:33"
#! FME_SERVER_SERVICES=""
#! VIEW_POSITION="-1923.02 129.001"
#! MAX_LOG_FEATURES="200"
#! SOURCE="NONE"
#! ZOOM_SCALE="100"
#! REDIRECT_TERMINATORS="NONE"
#! END_TCL=""
#! DOC_TOP_LEFT="-1051.01 -524.505"
#! FME_STROKE_MAX_DEVIATION="0"
#! SHOW_ANNOTATIONS="true"
#! SOURCE_ROUTING_FILE=""
#! IGNORE_READER_FAILURE="No"
#! FME_REPROJECTION_ENGINE="FME"
#! TITLE=""
#! >
#! <DATASETS>
#! </DATASETS>
#! <DATA_TYPES>
#! </DATA_TYPES>
#! <GEOM_TYPES>
#! </GEOM_TYPES>
#! <FEATURE_TYPES>
#! </FEATURE_TYPES>
#! <FMESERVER>
#! </FMESERVER>
#! <GLOBAL_PARAMETERS>
#! </GLOBAL_PARAMETERS>
#! <COMMENTS>
#! </COMMENTS>
#! <CONSTANTS>
#! </CONSTANTS>
#! <BOOKMARKS>
#! </BOOKMARKS>
#! <TRANSFORMERS>
#! <TRANSFORMER
#! IDENTIFIER="1"
#! TYPE="WorkspaceRunner"
#! VERSION="2"
#! POSITION="-409.004 -488.505"
#! BOUNDING_RECT="-409.004 -488.505 -1 -1"
#! ORDER="5e+014"
#! PARMS_EDITED="true"
#! ENABLED="true"
#! LAST_PARM_EDIT="15515"
#! >
#! <OUTPUT_FEAT NAME="SUCCEEDED"/>
#! <FEAT_COLLAPSED COLLAPSED="0"/>
#! <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#! <OUTPUT_FEAT NAME="FAILED"/>
#! <FEAT_COLLAPSED COLLAPSED="1"/>
#! <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#! <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#! <OUTPUT_FEAT NAME="SUMMARY"/>
#! <FEAT_COLLAPSED COLLAPSED="2"/>
#! <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#! <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#! <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE="&lt;Unused&gt;"/>
#! <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)accessToCSV.fmw"/>
#! <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner"/>
#! <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE="MULTIFILE,DIRNAME"/>
#! <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE="SourceDataset_MDB_ADO,S:&lt;backslash&gt;Temp&lt;backslash&gt;EPRTR&lt;backslash&gt;Acces&lt;backslash&gt;Public_Database_2015-12-09.mdb,DestDataset_CSV,S:&lt;backslash&gt;Temp&lt;backslash&gt;EPRTR&lt;backslash&gt;Acces&lt;backslash&gt;CSV"/>
#! <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="Yes"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#! IDENTIFIER="2"
#! TYPE="WorkspaceRunner"
#! VERSION="2"
#! POSITION="270.003 -488.505"
#! BOUNDING_RECT="270.003 -488.505 -1 -1"
#! ORDER="5e+014"
#! PARMS_EDITED="true"
#! ENABLED="true"
#! LAST_PARM_EDIT="15515"
#! >
#! <OUTPUT_FEAT NAME="SUCCEEDED"/>
#! <FEAT_COLLAPSED COLLAPSED="0"/>
#! <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#! <OUTPUT_FEAT NAME="FAILED"/>
#! <FEAT_COLLAPSED COLLAPSED="1"/>
#! <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="1" />
#! <XFORM_ATTR ATTR_NAME="_failure_message" IS_USER_CREATED="false" FEAT_INDEX="1" />
#! <OUTPUT_FEAT NAME="SUMMARY"/>
#! <FEAT_COLLAPSED COLLAPSED="2"/>
#! <XFORM_ATTR ATTR_NAME="_proc_count" IS_USER_CREATED="false" FEAT_INDEX="2" />
#! <XFORM_ATTR ATTR_NAME="_processes{}" IS_USER_CREATED="false" FEAT_INDEX="2" />
#! <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="MAX_PROC" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="WORKSPACE_FILE" PARM_VALUE="$(FME_MF_DIR)zipcsv.fmw"/>
#! <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="WorkspaceRunner_2"/>
#! <XFORM_PARM PARM_NAME="PARAMETER_TYPES" PARM_VALUE="MULTIDIR,TEXT"/>
#! <XFORM_PARM PARM_NAME="WORKSPACE_PARAMETERS" PARM_VALUE="SourceDataset_PATH,S:&lt;backslash&gt;Temp&lt;backslash&gt;EPRTR&lt;backslash&gt;Acces&lt;backslash&gt;CSV,DestZIP,S:&lt;backslash&gt;Temp&lt;backslash&gt;EPRTR&lt;backslash&gt;Acces&lt;backslash&gt;CSV&lt;backslash&gt;Public_DB.zip"/>
#! <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="BLOCKING" PARM_VALUE="No"/>
#! </TRANSFORMER>
#! <TRANSFORMER
#! IDENTIFIER="4"
#! TYPE="Creator"
#! VERSION="5"
#! POSITION="-1051.01 -524.505"
#! BOUNDING_RECT="-1051.01 -524.505 -1 -1"
#! ORDER="5e+014"
#! PARMS_EDITED="false"
#! ENABLED="true"
#! LAST_PARM_EDIT="15515"
#! >
#! <OUTPUT_FEAT NAME="CREATED"/>
#! <FEAT_COLLAPSED COLLAPSED="0"/>
#! <XFORM_ATTR ATTR_NAME="_creation_instance" IS_USER_CREATED="false" FEAT_INDEX="0" />
#! <XFORM_PARM PARM_NAME="PARAMETERS_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="COORDSYS" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="XFORMER_NAME" PARM_VALUE="Creator"/>
#! <XFORM_PARM PARM_NAME="COORDS" PARM_VALUE="&lt;Unused&gt;"/>
#! <XFORM_PARM PARM_NAME="ATEND" PARM_VALUE="no"/>
#! <XFORM_PARM PARM_NAME="CRE_ATTR" PARM_VALUE="_creation_instance"/>
#! <XFORM_PARM PARM_NAME="GEOM" PARM_VALUE="&lt;lt&gt;?xml&lt;space&gt;version=&lt;quote&gt;1.0&lt;quote&gt;&lt;space&gt;encoding=&lt;quote&gt;US_ASCII&lt;quote&gt;&lt;space&gt;standalone=&lt;quote&gt;no&lt;quote&gt;&lt;space&gt;?&lt;gt&gt;&lt;lt&gt;geometry&lt;space&gt;dimension=&lt;quote&gt;2&lt;quote&gt;&lt;gt&gt;&lt;lt&gt;null&lt;solidus&gt;&lt;gt&gt;&lt;lt&gt;&lt;solidus&gt;geometry&lt;gt&gt;"/>
#! <XFORM_PARM PARM_NAME="TRANSFORMER_GROUP" PARM_VALUE=""/>
#! <XFORM_PARM PARM_NAME="NUM" PARM_VALUE="1"/>
#! <XFORM_PARM PARM_NAME="GEOMTYPE" PARM_VALUE="Geometry Object"/>
#! </TRANSFORMER>
#! </TRANSFORMERS>
#! <FEAT_LINKS>
#! <FEAT_LINK
#! IDENTIFIER="3"
#! SOURCE_NODE="1"
#! TARGET_NODE="2"
#! SOURCE_PORT_DESC="fo 0"
#! TARGET_PORT_DESC="fi 0"
#! ENABLED="true"
#! EXTRA_POINTS=""
#! />
#! <FEAT_LINK
#! IDENTIFIER="5"
#! SOURCE_NODE="4"
#! TARGET_NODE="1"
#! SOURCE_PORT_DESC="fo 0"
#! TARGET_PORT_DESC="fi 0"
#! ENABLED="true"
#! EXTRA_POINTS=""
#! />
#! </FEAT_LINKS>
#! <BREAKPOINTS>
#! </BREAKPOINTS>
#! <ATTR_LINKS>
#! </ATTR_LINKS>
#! <SUBDOCUMENTS>
#! </SUBDOCUMENTS>
#! <LOOKUP_TABLES>
#! </LOOKUP_TABLES>
#! </WORKSPACE>
#! 
#! START_HEADER
#! START_WB_HEADER
READER_TYPE NULL
READER_KEYWORD NULL_SOURCE
NULL_SOURCE_DATASET null
WRITER_TYPE NULL
WRITER_KEYWORD NULL_DEST
NULL_DEST_DATASET null
#! END_WB_HEADER
#! END_HEADER

LOG_FILENAME "$(FME_MF_DIR)Main.log"
LOG_APPEND NO
LOG_MAX_FEATURES 200
LOG_MAX_RECORDED_FEATURES 200
LOG_MAX_PRECISION Yes
FME_REPROJECTION_ENGINE FME
FME_IMPLICIT_CSMAP_REPROJECTION_MODE Auto
FME_GEOMETRY_HANDLING Enhanced
FME_STROKE_MAX_DEVIATION 0
LOG_FILTER_MASK -1
# -------------------------------------------------------------------------

MULTI_READER_CONTINUE_ON_READER_FAILURE No

# -------------------------------------------------------------------------

MACRO WORKSPACE_NAME Main
MACRO FME_VIEWER_APP fmedatainspector
DEFAULT_MACRO WB_CURRENT_CONTEXT
# -------------------------------------------------------------------------

Tcl2 proc Creator_CoordSysRemover {} {   global FME_CoordSys;   set FME_CoordSys {}; }
MACRO Creator_XML     NOT_ACTIVATED
MACRO Creator_CLASSIC NOT_ACTIVATED
MACRO Creator_2D3D    2D_GEOMETRY
MACRO Creator_COORDS  <Unused>
INCLUDE [ if { {Geometry Object} == {Geometry Object} } {            puts {MACRO Creator_XML *} } ]
INCLUDE [ if { {Geometry Object} == {2D Coordinate List} } {            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {3D Coordinate List} } {            puts {MACRO Creator_2D3D 3D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
INCLUDE [ if { {Geometry Object} == {2D Min/Max Box} } {            set comment {                We need to turn the COORDS which are                    minX minY maxX maxY                into a full polygon list of coordinates            };            set splitCoords [split [string trim {<Unused>}]];            if { [llength $splitCoords] > 4} {               set trimmedCoords {};               foreach item $splitCoords { if { $item != {} } {lappend trimmedCoords $item} };               set splitCoords $trimmedCoords;            };            if { [llength $splitCoords] != 4 } {                error {Creator: Coordinate list is expected to be a space delimited list of four numbers as 'minx miny maxx maxy' - `<Unused>' is invalid};            };            set minX [lindex $splitCoords 0];            set minY [lindex $splitCoords 1];            set maxX [lindex $splitCoords 2];            set maxY [lindex $splitCoords 3];            puts "MACRO Creator_COORDS $minX $minY $minX $maxY $maxX $maxY $maxX $minY $minX $minY";            puts {MACRO Creator_2D3D 2D_GEOMETRY};            puts {MACRO Creator_CLASSIC *} } ]
FACTORY_DEF $(Creator_XML) CreationFactory    FACTORY_NAME Creator_XML_Creator    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______        @Geometry(FROM_ENCODED_STRING,<lt>?xml<space>version=<quote>1.0<quote><space>encoding=<quote>US_ASCII<quote><space>standalone=<quote>no<quote><space>?<gt><lt>geometry<space>dimension=<quote>2<quote><gt><lt>null<solidus><gt><lt><solidus>geometry<gt>)
FACTORY_DEF $(Creator_CLASSIC) CreationFactory    FACTORY_NAME Creator_CLASSIC_Creator    $(Creator_2D3D) $(Creator_COORDS)    CREATE_AT_END no    OUTPUT FEATURE_TYPE _____CREATED______
FACTORY_DEF * TeeFactory    FACTORY_NAME Creator_Cloner    INPUT FEATURE_TYPE _____CREATED______    NUMBER_OF_COPIES 1    COPY_NUMBER_ATTRIBUTE "_creation_instance"    OUTPUT FEATURE_TYPE Creator_CREATED        @Tcl2(Creator_CoordSysRemover)        @CoordSys()        fme_feature_type Creator

# -------------------------------------------------------------------------

# Convert the workspace name to one containing only / -- Tcl likes this better
# (and so do I)

# And determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1}      };
Tcl2 proc WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_runner { parmListString workspaceFile } {    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string trim $parmListString {()}];    set comment {        Build up the command line in a list, which we'll "eval" to get        at its pieces when we actually execute the "exec".    };    lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme}                             $workspaceFileUnix;    set parmList [split $parmListString {,}];    foreach {parmName encodedValue} $parmList {       set comment {           Decode the parameter value which we now know is very encoded to guard           it from the parser and append them each to a new list which will be passed           as the arguments to the exec function.  Note that the           parameter names need to be turned into macro settings by           prepending them with --           Note also that the WorkspaceRunner sometimes encodes attribute           dereferences by placing <amp> at the beginning rather than using @Value.           Further note that string range forgives if the ending index is > the length of           the string, so we can just ask for the first 5 characters           when we're checking for <amp>.       };       lappend commandArguments \"--$parmName\";       set comment {           for backwards compatibility, replace first <amp>       };       if { [string range $encodedValue 0 4] == {<amp>} &&            [string length $encodedValue] > 5 } {           set encodedValue [string replace $encodedValue 0 4 {<at>Value<openparen>}]];           append encodedValue "<closeparen>";       };       set comment { We used to call FME_DecodeTextOrAttr here. After changes to                     the code that writes out the mapping file section, we don't                     need to do this any more because the value would be in the                     correct state of encoding as required by the child workspace       };       set comment { parameter values starting with '<' causes tcl exec to fail so                     we escape leading '<' with backslash and then do the reverse                     when parsing command line arguments       };       if { [string index $encodedValue 0] == {<} } {          set encodedValue "\\$encodedValue";       };       lappend commandArguments $encodedValue;    };    set comment {        Now optionally run this in a detached way if we were not supposed        to wait by adding & on the end to put it in the background.  And        at the same time, ensure that any stray stdout/stderr is routed to        null.    };    if { {Yes} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";        FME_LogMessage fme_inform \"WorkspaceRunner: Initiating run of FME Workspace $workspaceFile with command line:\";    } else {        FME_LogMessage fme_inform \"WorkspaceRunner: Running FME Workspace $workspaceFile with command line:\";    };    set comment {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {Yes} == {No} } {        lappend commandArguments {&};    };    FME_LogMessage fme_inform [concat WorkspaceRunner: $commandArguments];    if { {Yes} == {No} } {       after 1000;       while { [FME_CanSpawnFme <Unused>] == {0} } {             after 2000;       };    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn \"WorkspaceRunner: Failed to run workspace $workspaceFileUnix -- Trace was:\n\n$msg\n\";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_process_count;       incr WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_process_count;       if { {Yes} == {No} } {           FME_LogMessage fme_inform \"WorkspaceRunner: Successfully initiated run of workspace $workspaceFile\";           global WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_all_processes;           lappend WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_all_processes $msg;       } else {           FME_LogMessage fme_inform \"WorkspaceRunner: Successfully ran workspace $workspaceFile\";       };       return SUCCESS;    }; }
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_ExecutorAndRouter    INPUT  FEATURE_TYPE Creator_CREATED    TEST @Tcl2("WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_runner {(SourceDataset_MDB_ADO,S:\Temp\EPRTR\Acces\Public_Database_2015-12-09.mdb,DestDataset_CSV,S:\Temp\EPRTR\Acces\CSV)} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)accessToCSV.fmw,WorkspaceRunner)}") == SUCCESS    OUTPUT PASSED FEATURE_TYPE WorkspaceRunner_SUCCEEDED
Tcl2 proc WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_summarizer { } {     global WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_process_count];     global WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_all_processes;     if {[info exists WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_a7c0caf8_1411_43bc_9491_f9c2d3f9ba8b7_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

# Convert the workspace name to one containing only / -- Tcl likes this better
# (and so do I)

# And determine the "NULL" device so we can ensure we don't get stray output
# messing up our stdout if we are running workspaces in the background
# See http://wiki.tcl.tk/1649 for a description of the tcl_platform
# variable, the "platform" part seems to have valid values windows, unix, and
# macintosh (the latter of which is actually pre-OS X)

Tcl2 if { $tcl_platform(platform) == {windows} } {         set ::null_device {NUL:};         set ::__WR_ENV_HELPER__ {};      } else {         set ::null_device {/dev/null};         set ::__WR_ENV_HELPER__ {/usr/bin/env FME_SUBPROCESS_RUN_DETACHED=1}      };
Tcl2 proc WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_runner { parmListString workspaceFile } {    set workspaceFileUnix [regsub -all {\\} $workspaceFile {/}];    set parmListString [string trim $parmListString {()}];    set comment {        Build up the command line in a list, which we'll "eval" to get        at its pieces when we actually execute the "exec".    };    lappend commandArguments {*}$::__WR_ENV_HELPER__ {$(FME_HOME_UNIX)/fme}                             $workspaceFileUnix;    set parmList [split $parmListString {,}];    foreach {parmName encodedValue} $parmList {       set comment {           Decode the parameter value which we now know is very encoded to guard           it from the parser and append them each to a new list which will be passed           as the arguments to the exec function.  Note that the           parameter names need to be turned into macro settings by           prepending them with --           Note also that the WorkspaceRunner sometimes encodes attribute           dereferences by placing <amp> at the beginning rather than using @Value.           Further note that string range forgives if the ending index is > the length of           the string, so we can just ask for the first 5 characters           when we're checking for <amp>.       };       lappend commandArguments \"--$parmName\";       set comment {           for backwards compatibility, replace first <amp>       };       if { [string range $encodedValue 0 4] == {<amp>} &&            [string length $encodedValue] > 5 } {           set encodedValue [string replace $encodedValue 0 4 {<at>Value<openparen>}]];           append encodedValue "<closeparen>";       };       set comment { We used to call FME_DecodeTextOrAttr here. After changes to                     the code that writes out the mapping file section, we don't                     need to do this any more because the value would be in the                     correct state of encoding as required by the child workspace       };       set comment { parameter values starting with '<' causes tcl exec to fail so                     we escape leading '<' with backslash and then do the reverse                     when parsing command line arguments       };       if { [string index $encodedValue 0] == {<} } {          set encodedValue "\\$encodedValue";       };       lappend commandArguments $encodedValue;    };    set comment {        Now optionally run this in a detached way if we were not supposed        to wait by adding & on the end to put it in the background.  And        at the same time, ensure that any stray stdout/stderr is routed to        null.    };    if { {No} == {No} } {        lappend commandArguments \">$::null_device\";        lappend commandArguments \"<$::null_device\";        FME_LogMessage fme_inform \"WorkspaceRunner_2: Initiating run of FME Workspace $workspaceFile with command line:\";    } else {        FME_LogMessage fme_inform \"WorkspaceRunner_2: Running FME Workspace $workspaceFile with command line:\";    };    set comment {        The below 2>@1 forces any standard error output to go into the msg variable        or to NULL if we're running in the background.    };    lappend commandArguments {2>@1};    if { {No} == {No} } {        lappend commandArguments {&};    };    FME_LogMessage fme_inform [concat WorkspaceRunner_2: $commandArguments];    if { {No} == {No} } {       after 1000;       while { [FME_CanSpawnFme ] == {0} } {             after 2000;       };    };    if {[catch {eval [concat exec $commandArguments] } msg ]} {       set msg [regsub {\015*\012child[^\012]*$} $msg {}];       FME_LogMessage fme_warn \"WorkspaceRunner_2: Failed to run workspace $workspaceFileUnix -- Trace was:\n\n$msg\n\";       FME_SetAttribute _failure_message $msg;       return FAILURE;    } else {       global WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_process_count;       incr WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_process_count;       if { {No} == {No} } {           FME_LogMessage fme_inform \"WorkspaceRunner_2: Successfully initiated run of workspace $workspaceFile\";           global WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_all_processes;           lappend WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_all_processes $msg;       } else {           FME_LogMessage fme_inform \"WorkspaceRunner_2: Successfully ran workspace $workspaceFile\";       };       return SUCCESS;    }; }
FACTORY_DEF * TestFactory    FACTORY_NAME WorkspaceRunner_2_ExecutorAndRouter    INPUT  FEATURE_TYPE WorkspaceRunner_SUCCEEDED    TEST @Tcl2("WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_runner {(SourceDataset_PATH,S:\Temp\EPRTR\Acces\CSV,DestZIP,S:\Temp\EPRTR\Acces\CSV\Public_DB.zip)} {@EvaluateExpression(FDIV,STRING,$(FME_MF_DIR$encode)zipcsv.fmw,WorkspaceRunner_2)}") == SUCCESS
Tcl2 proc WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_summarizer { } {     global WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_process_count;     set comment { incr 0 creates the variable if it wasn't present };     incr WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_process_count 0;     FME_SetAttribute _proc_count [set WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_process_count];     global WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_all_processes;     if {[info exists WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_all_processes]} {         set index 0;         foreach pid [set WorkspaceRunner_2_3c25ef98_c153_4e3a_b4cc_9e989ee47bb28_all_processes] {             FME_SetAttribute \"_processes{$index}\" $pid;             incr index;         }     } }
FACTORY_DEF * CreationFactory    FACTORY_NAME WorkspaceRunner_2_SummaryMaker    CREATE_AT_END yes

# -------------------------------------------------------------------------

FACTORY_DEF * RoutingFactory FACTORY_NAME "Destination Feature Type Routing Correlator"   INPUT FEATURE_TYPE *   OUTPUT ROUTED FEATURE_TYPE * @FeatureType(ENCODED,@Value(__wb_out_feat_type__)) @RemoveAttributes(__wb_out_feat_type__)   OUTPUT NOT_ROUTED FEATURE_TYPE __nuke_me__ @Tcl2("FME_StatMessage 818059 [FME_GetAttribute fme_template_feature_type] 818060 818061 fme_warn")
# -------------------------------------------------------------------------

FACTORY_DEF * TeeFactory   FACTORY_NAME "Final Output Nuker"   INPUT FEATURE_TYPE __nuke_me__


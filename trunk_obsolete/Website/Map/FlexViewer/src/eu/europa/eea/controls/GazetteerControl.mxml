<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	styleName="GazetteerControl"
	creationComplete="init()" height="22" visible="false" >
	
	<mx:Script>
		<![CDATA[
			import mx.managers.CursorManager;
			import com.esri.ags.symbol.PictureMarkerSymbol;
			import com.esri.solutions.flexviewer.AppEvent;
			//import com.esri.solutions.flexviewer.AppContainer;
			import com.esri.ags.Map;
			import com.esri.ags.layers.GraphicsLayer;
			import eu.europa.eea.widgets.Gazetteer.GazetteerResultData;
			import com.google.maps.services.Placemark;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.esri.solutions.flexviewer.SiteContainer;
		
			
			private var _settings:Object;
			
			[Bindable]
			public var languageHelpText:String;
			[Bindable]
			public var languageNoResultText:String;
			[Bindable]
			public var languageSearchText:String;
			[Bindable]
			public var languageClearText:String;
			
			[Bindable]
			private var helpText:String = "Find a location...";
			[Bindable]
			private var noResultText:String =  "There are no results"; 
			[Bindable]
			private var searchText:String = "Find location";
			[Bindable]
			private var clearText:String = "Clear";
			
			
			private var generalViewExtentSize:Number = 2;
			[Bindable]
			private var map:com.esri.ags.Map;
			private var mapkey:String = "";//ABQIAAAAUW2mQvq4b1MjD8sCj8yQNBT2yXp_ZAY8_ufC3CFXhHIE1NvwkxRovzTeiu8AoKEs1Mi7wDu7ZNq3sQ
			private var gmap:com.google.maps.Map;
			
			private var geocoder:ClientGeocoder;
	
			private var _locationRenderer:GazetteerLocationRenderer;
			private function get locationRenderer():GazetteerLocationRenderer
			{
				if (_locationRenderer == null)
				{
					_locationRenderer = new GazetteerLocationRenderer(map);
				}
				return _locationRenderer;
			}
			
			private function init():void
			{	
				if(_settings)
				{
					helpText = languageHelpText || _settings.inputtext;
					noResultText = languageNoResultText || _settings.noresulttext;
					searchText = languageSearchText || _settings.searchtext;
					clearText = languageClearText || _settings.cleartext;
					mapkey = _settings.value;
					gmap = new com.google.maps.Map();
					gmap.height = 0;
					gmap.key = mapkey;
					gmap.addEventListener(MapEvent.MAP_READY, onGMapReady);
					gmap.addEventListener(MapEvent.MAP_INITIALIZE_FAILED, onGMapFail);
					this.addChild(gmap);
				}		
				
				
				
			}
			public function set settings(value:Object):void
			{
				_settings = value;
				this.init();
			}
			private function onMapLoad(event:AppEvent):void
			{
				map = event.data as com.esri.ags.Map;
			}
			private function onGMapFail(event:MapEvent):void
			{
				trace(event.type);
			}
			private function onGMapReady(event:MapEvent):void
			 {
				map = SiteContainer.getInstance().controller.map;
				gmap.setSize(new Point(0,0));				
				gmap.setVisible(false,false);				
				geocoder = new ClientGeocoder();
				geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, handleGeocodingSuccess);
				geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, handleGeocodingFailure);
				readyForSearch();
				this.visible = true;
				
			}
			private function onTextFocusIn():void
			{
				if (locationText.text == helpText || locationText.text == languageHelpText)
				{
					locationText.text = "";
				}
				else
				{
					locationText.selectionBeginIndex = 0;
					locationText.selectionEndIndex = locationText.text.length;
				}
			}
			
			private function onTextFocusOut():void
			{
				if (locationText.text == "")
				{
					locationText.text = languageHelpText || helpText;
					locationText.toolTip = languageHelpText || helpText;
				}
			}
			
			private function search():void
			{
				if (locationText.text != languageHelpText && locationText.text != helpText && locationText.text != "")
					locationText.toolTip = "";
					CursorManager.setBusyCursor();					
					searchButton.enabled = false;
					locationText.enabled = false;
					geocoder.geocode(locationText.text);	
			}
						
			private function handleGeocodingSuccess(event:GeocodingEvent):void 
			{
				readyForSearch()
				var placemark:Placemark = event.response.placemarks[0];
				displayResult(new GazetteerResultData(placemark));
				
	  		}
					
			private function handleGeocodingFailure(event:GeocodingEvent):void
			{
				readyForSearch();
				locationText.text = languageNoResultText || noResultText;
				locationText.toolTip = languageNoResultText || noResultText;              
			}
			
			private function displayResult(result:GazetteerResultData):void
			{
				locationText.text = result.title;
				locationText.toolTip = result.title;
				locationRenderer.clear();
				locationRenderer.addLocation(result);
			}
			
			private function clear():void
			{
				locationText.text = languageHelpText || helpText;
				locationText.toolTip = languageHelpText || helpText;
				locationRenderer.clear();
			}
			private function readyForSearch():void
			{				
				CursorManager.removeBusyCursor();
				searchButton.enabled = true;
				locationText.enabled = true;
			}
			
		]]>
	</mx:Script>
	
	<mx:TextInput id="locationText" width="100" text="{languageHelpText || helpText}"
		focusIn="onTextFocusIn()" focusOut="onTextFocusOut()" 
		enter="search()" enabled="false" />
	<mx:Button icon="@Embed(source='com/esri/solutions/flexviewer/assets/images/icons/i_search_small.png')" 
		toolTip="{languageSearchText || searchText}" id="searchButton"
		width="20" height="20" click="search()" 
		useHandCursor="true" enabled="false" />
	<mx:Button icon="@Embed(source='com/esri/solutions/flexviewer/assets/images/icons/i_broom_small.png')" 
		toolTip="{languageClearText || clearText}" id="clearButton" 
		width="20" height="20" click="clear()" 
		useHandCursor="true" />

			
</mx:HBox>
